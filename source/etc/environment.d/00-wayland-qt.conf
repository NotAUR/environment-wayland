# See: https://wiki.archlinux.org/title/Wayland
QT_QPA_PLATFORM="wayland;xcb"

# Probably causing:
# setHighDpiScaleFactorRoundingPolicy must be called before creating the QGuiApplication instance
# See: https://bugreports.qt.io/browse/QTBUG-132430
# QT_SCALE_FACTOR_ROUNDING_POLICY=RoundPreferFloor

# QT_AUTO_SCREEN_SCALE_FACTOR [boolean] enables automatic scaling, based on the monitor's pixel density. This won't change the size of point-sized fonts, since point is a physical measurement unit. Multiple screens may get different scale factors.
# See: https://doc.qt.io/qt-5/highdpi.html#high-dpi-support-in-qt
QT_AUTO_SCREEN_SCALE_FACTOR=0

# QT_SCALE_FACTOR [numeric] defines a global scale factor for the whole application, including point-sized fonts.
# See: https://doc.qt.io/qt-5/highdpi.html#high-dpi-support-in-qt
QT_SCALE_FACTOR=

# QT_SCREEN_SCALE_FACTORS [list] specifies scale factors for each screen. This won't change the size of point-sized fonts. The environment variable is mainly useful for debugging, or to work around monitors with wrong EDID information(Extended Display Identification Data).
# See: https://doc.qt.io/qt-5/highdpi.html#high-dpi-support-in-qt
QT_SCREEN_SCALE_FACTORS=

# The QT_SCALE_FACTOR_ROUNDING_POLICY environment variable and QGuiApplication::highDpiScaleFactorRoundingPolicy API, introduced in Qt 5.14, makes it possible to control if and how the device pixel ratio should be rounded to the nearest integer. This is relevant for configurations like Windows at 150% scale. Possible values are Round, Ceil, Floor, RoundPreferFloor, PassThrough. See the Qt::HighDpiScaleFactorRoundingPolicy enum documentation for a full description of the options.
# See: https://doc.qt.io/qt-5/highdpi.html#high-dpi-support-in-qt
# See: https://doc.qt.io/qt-5/qt.html#HighDpiScaleFactorRoundingPolicy-enum
#
# Options:
# Round = 1	Round up for .5 and above.
# Ceil = 2	# Always round up.
# Floor = 3 #	Always round down.
# RoundPreferFloor = 4 # Round up for .75 and above.
# PassThrough =	5 #	Don't round.
QT_SCALE_FACTOR_ROUNDING_POLICY=Floor

# In Qt 5.4, there was an experimental implementation of high DPI scaling introduced via the QT_DEVICE_PIXEL_RATIO environment variable, that you could set to a numerical scale factor or auto. This variable was deprecated in Qt 5.6.
# See: https://doc.qt.io/qt-5/highdpi.html#high-dpi-support-in-qt
QT_DEVICE_PIXEL_RATIO=auto

