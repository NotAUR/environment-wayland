# See: https://wiki.archlinux.org/title/Wayland

# See: https://doc.qt.io/qt-6/embedded-linux.html#specifying-additional-settings
# See: https://doc.qt.io/qt-6/qguiapplication.html#platformName-prop
QT_QPA_PLATFORMS="wayland;xcb;eglfs;linuxfb;directfb;android;cocoa"

# QT_SCALE_FACTOR [numeric] defines a global scale factor for the whole application, including point-sized fonts.
# See: https://doc.qt.io/qt-5/highdpi.html#high-dpi-support-in-qt
# QT_SCALE_FACTOR=
unset QT_SCALE_FACTOR

# QT_SCREEN_SCALE_FACTORS [list] specifies scale factors for each screen. This won't change the size of point-sized fonts. The environment variable is mainly useful for debugging, or to work around monitors with wrong EDID information(Extended Display Identification Data).
# See: https://doc.qt.io/qt-5/highdpi.html#high-dpi-support-in-qt
# QT_SCREEN_SCALE_FACTORS=
unset QT_SCREEN_SCALE_FACTORS

# The QT_SCALE_FACTOR_ROUNDING_POLICY environment variable and QGuiApplication::highDpiScaleFactorRoundingPolicy API, introduced in Qt 5.14, makes it possible to control if and how the device pixel ratio should be rounded to the nearest integer. This is relevant for configurations like Windows at 150% scale. Possible values are Round, Ceil, Floor, RoundPreferFloor, PassThrough. See the Qt::HighDpiScaleFactorRoundingPolicy enum documentation for a full description of the options.
# See: https://doc.qt.io/qt-5/highdpi.html#high-dpi-support-in-qt
# See: https://doc.qt.io/qt-5/qt.html#HighDpiScaleFactorRoundingPolicy-enum
#
# Options:
# Round = 1	Round up for .5 and above.
# Ceil = 2	# Always round up.
# Floor = 3 #	Always round down.
# RoundPreferFloor = 4 # Round up for .75 and above.
# PassThrough =	5 #	Don't round.
QT_SCALE_FACTOR_ROUNDING_POLICY=Floor

#
# Probably causing:
# setHighDpiScaleFactorRoundingPolicy must be called before creating the QGuiApplication instance
# See: https://bugreports.qt.io/browse/QTBUG-132430
#
# QT_SCALE_FACTOR_ROUNDING_POLICY=RoundPreferFloor
#
# Warning: QT_DEVICE_PIXEL_RATIO is deprecated. Instead use:
#    QT_AUTO_SCREEN_SCALE_FACTOR to enable platform plugin controlled per-screen factors.
#    QT_SCREEN_SCALE_FACTORS to set per-screen DPI.
#    QT_SCALE_FACTOR to set the application global scale factor. 
#
# In Qt 5.4, there was an experimental implementation of high DPI scaling introduced via the QT_DEVICE_PIXEL_RATIO environment variable, that you could set to a numerical scale factor or auto. This variable was deprecated in Qt 5.6.
# See: https://doc.qt.io/qt-5/highdpi.html#high-dpi-support-in-qt
QT_DEVICE_PIXEL_RATIO=auto

#
# As a porting aid, the QML_COMPAT_RESOLVE_URLS_ON_ASSIGNMENT environment variable can be set to 1 to obtain the Qt 5 behavior. This is possible since Qt 6.2.2. However, it is recommended to only use this to unblock a port, and to use Qt.resolvedUrl as explained above.
#
# See: https://doc.qt.io/qt-6/qml-changes-qt6.html#url-resolution
QML_COMPAT_RESOLVE_URLS_ON_ASSIGNMENT=0

#
# QT_AUTO_SCREEN_SCALE_FACTOR [boolean] enables automatic scaling, based on the monitor's pixel density. This won't change the size of point-sized fonts, since point is a physical measurement unit. Multiple screens may get different scale factors.
# See: https://doc.qt.io/qt-5/highdpi.html#high-dpi-support-in-qt
QT_AUTO_SCREEN_SCALE_FACTOR=1

#
# Set to 0 to disable high-dpi scaling; effectively reverting to Qt 5 default behavior. Note that this has no effect on platforms such as Wayland or macOS - it does not disable any native high-DPI support. This variable is intended for testing purposes only, and we do not recommend setting it on a permanent basis.
# See: https://doc.qt.io/qt-6/highdpi.html#environment-variable-reference
unset QT_ENABLE_HIGHDPI_SCALING

#
# Makes Qt use physical DPI instead of logical DPI. Using logical DPI is normally the best option; this environment variable can be set in cases where logical DPI is not available and the physical DPI is known to be correct.
unset QT_USE_PHYSICAL_DPI

#
# Sets a global DPI. This is a legacy environment variable provided for backwards compatibility.
unset QT_FONT_DPI