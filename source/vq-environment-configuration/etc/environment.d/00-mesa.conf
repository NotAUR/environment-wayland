# See: https://docs.mesa3d.org/envvars.html
#

# .. envvar:: MESA_NO_ERROR
# 
#    if set to 1, error checking is disabled as per :ext:`GL_KHR_no_error`.
#    This will result in undefined behavior for invalid use of the API, but
#    can reduce CPU use for apps that are known to be error free.
MESA_NO_ERROR=0


# Nine frontend environment variables
# -----------------------------------
# 
# .. envvar:: D3D_ALWAYS_SOFTWARE
# 
#    an integer, which forces Nine to use the CPU instead of GPU acceleration.
D3D_ALWAYS_SOFTWARE=0

# .. envvar:: DRAW_USE_LLVM
# 
#    if set to zero, the draw module will not use LLVM to execute shaders,
#    vertex fetch, etc.
DRAW_USE_LLVM=1

# i915
I915_NO_HW=false
# I915_DEBUG=
# I915_DUMP_CMD=

# Rusticl environment variables
# -----------------------------
# 
# .. envvar:: RUSTICL_ENABLE
# 
#    a comma-separated list of drivers to enable CL on. An optional list of
#    comma-separated integers can be passed per driver to specify which devices
#    to enable. Examples:
# 
#    -  ``RUSTICL_ENABLE=iris`` (enables all iris devices)
#    -  ``RUSTICL_ENABLE=iris:1,radeonsi:0,2`` (enables second iris and first
#       and third radeonsi device)
# 
#    Supported drivers (decent support with maybe a few conformance issues or bugs):
#    ``iris``,
#    ``llvmpipe``,
#    ``nouveau``,
#    ``panfrost``,
#    ``radeonsi``,
#    Experimental drivers (unknown level of support, expect conformance issues or major bugs):
#    ``r600``
RUSTICL_ENABLE=iris

RUSTICL_CL_VERSION=
# RUSTICL_DEBUG=

# CLC_DEBUG=
D3D_ALWAYS_SOFTWARE=false
# GALLIUM_DRIVER=
unset GALLIUM_DRIVER

# Gallium environment variables
# -----------------------------
# 
# .. envvar:: GALLIUM_HUD
# 
#    draws various information on the screen, like framerate, CPU load,
#    driver statistics, performance counters, etc. Set
#    :envvar:`GALLIUM_HUD` to ``help`` and run e.g. ``glxgears`` for more info.
#
# .. envvar:: GALLIUM_HUD_PERIOD
# 
#    sets the HUD update rate in seconds (float). Use zero to update every
#    frame. The default period is 1/2 second.
# 
# .. envvar:: GALLIUM_HUD_VISIBLE
# 
#    control default visibility, defaults to true.
# 
# .. envvar:: GALLIUM_HUD_OPACITY
# 
#    control background opacity as an integer percentage (1-100), defaults to 66%.
# 
# .. envvar:: GALLIUM_HUD_TOGGLE_SIGNAL
# 
#    toggle visibility via user specified signal. Especially useful to
#    toggle HUD at specific points of application and disable for
#    unencumbered viewing the rest of the time. For example, set
#    :envvar:`GALLIUM_HUD_VISIBLE` to ``false`` and
#    :envvar:`GALLIUM_HUD_TOGGLE_SIGNAL` to ``10`` (``SIGUSR1``). Use
#    ``kill -10 <pid>`` to toggle the HUD as desired.
# 
# .. envvar:: GALLIUM_HUD_SCALE
# 
#    Scale HUD by an integer factor, for high DPI displays. Default is 1.
# 
# .. envvar:: GALLIUM_HUD_ROTATION
# 
#    Rotate the HUD by an integer number of degrees, the specified value must be
#    a multiple of 90. Default is 0.
# 
# .. envvar:: GALLIUM_HUD_DUMP_DIR
# 
#    specifies a directory for writing the displayed HUD values into
#    files.
# 
# .. envvar:: GALLIUM_DRIVER
# 
#    useful in combination with :envvar:`LIBGL_ALWAYS_SOFTWARE` = ``true`` for
#    choosing one of the software renderers ``softpipe`` or ``llvmpipe``.
# 
# .. envvar:: GALLIUM_LOG_FILE
# 
#    specifies a file for logging all errors, warnings, etc. rather than
#    stderr.
# 
# .. envvar:: GALLIUM_PIPE_SEARCH_DIR
# 
#    specifies an alternate search directory for pipe-loader which overrides
#    the compile-time path based on the install location.
# 
# .. envvar:: GALLIUM_PRINT_OPTIONS
# 
#    if non-zero, print all the Gallium environment variables which are
#    used, and their current values.
# 
# .. envvar:: GALLIUM_TRACE
# 
#    If set, this variable will cause the :ref:`trace` output to be written to the
#    specified file. Paths may be relative or absolute; relative paths are relative
#    to the working directory.  For example, setting it to "trace.xml" will cause
#    the trace to be written to a file of the same name in the working directory.
# 
# .. envvar:: GALLIUM_TRACE_TC
# 
#    If enabled while :ref:`trace` is active, this variable specifies that the threaded context
#    should be traced for drivers which implement it. By default, the driver thread is traced,
#    which will include any reordering of the command stream from threaded context.
# 
# .. envvar:: GALLIUM_TRACE_TRIGGER
# 
#    If set while :ref:`trace` is active, this variable specifies a filename to monitor.
#    Once the file exists (e.g., from the user running 'touch /path/to/file'), a single
#    frame will be recorded into the trace output.
#    Paths may be relative or absolute; relative paths are relative to the working directory.
# 
# .. envvar:: GALLIUM_DUMP_CPU
# 
#    if non-zero, print information about the CPU on start-up
# 
# .. envvar:: TGSI_PRINT_SANITY
# 
#    if set, do extra sanity checking on TGSI shaders and print any errors
#    to stderr.
# 
# .. envvar:: DRAW_FSE
# 
#    Enable fetch-shade-emit middle-end even though its not correct (e.g.
#    for Softpipe)
# 
# .. envvar:: DRAW_NO_FSE
# 
#    Disable fetch-shade-emit middle-end even when it is correct
# 
# .. envvar:: DRAW_USE_LLVM
# 
#    if set to zero, the draw module will not use LLVM to execute shaders,
#    vertex fetch, etc.


# OpenGL
#
# .. envvar:: LIBGL_ALWAYS_SOFTWARE
# 
#    if set to ``true``, always use software rendering
LIBGL_ALWAYS_SOFTWARE=false
#
# .. envvar:: LIBGL_ALWAYS_INDIRECT
#
#   if set to ``true``, forces an indirect rendering context/connection.
LIBGL_ALWAYS_INDIRECT=false
# .. envvar:: LIBGL_DRI2_DISABLE
# 
#    disable DRI2 if set to ``true``.
LIBGL_DRI2_DISABLE=false
# 
# .. envvar:: LIBGL_DRI3_DISABLE
# 
#    disable DRI3 if set to ``true``.
LIBGL_DRI3_DISABLE=false
# 
# .. envvar:: LIBGL_KOPPER_DISABLE
# 
#    disable Vulkan swapchains with Zink if set to ``true``.
#    In general, this should not be used unless you know what you are
#    doing. Some examples of "knowing what you are doing" include:
#    - using a VK driver which has no WSI implementation for your display server
#    - profiling the DRI frontend against your VK driver's WSI implementation
# 
# .. envvar:: LIBGL_KOPPER_DRI2
# 
#    disable DRI3 with Zink if set to ``true``.
#    In general, this should not be used unless you know what you are
#    doing. Some examples of "knowing what you are doing" include:
#    - running xrdp
#    - using a VK driver which doesn't support modifiers

# Mesa
#
# For some reason, when we set it to 'zink', it removes the error from `eglinfo`
#
# Force default device
MESA_VK_DEVICE_SELECT_FORCE_DEFAULT_DEVICE=1

# Core Mesa environment variables
# -------------------------------
# 
# .. envvar:: MESA_NO_ERROR
# 
#    if set to 1, error checking is disabled as per :ext:`GL_KHR_no_error`.
#    This will result in undefined behavior for invalid use of the API, but
#    can reduce CPU use for apps that are known to be error free.
# 
# .. envvar:: MESA_DEBUG
# 
#    if set, error messages are printed to stderr. For example, if the
#    application generates a ``GL_INVALID_ENUM`` error, a corresponding
#    error message indicating where the error occurred, and possibly why,
#    will be printed to stderr. For release builds, :envvar:`MESA_DEBUG`
#    defaults to off (no debug output). :envvar:`MESA_DEBUG` accepts the
#    following comma-separated list of named flags, which adds extra
#    behavior to just set :envvar:`MESA_DEBUG` to ``1``:
# 
#    ``silent``
#       turn off debug messages. Only useful for debug builds.
#    ``flush``
#       flush after each drawing command
#    ``incomplete_tex``
#       extra debug messages when a texture is incomplete
#    ``incomplete_fbo``
#       extra debug messages when a FBO is incomplete
#    ``context``
#       create a debug context (see ``GLX_CONTEXT_DEBUG_BIT_ARB``) and
#       print error and performance messages to stderr (or
#       ``MESA_LOG_FILE``).
# 
# .. envvar:: MESA_PROCESS_NAME
# 
#    if set, overrides the process name string used internally for various
#    purposes (e.g. for driconf option matching, logging, artifact storage,
#    etc.).
# 
# .. envvar:: MESA_LOG_FILE
# 
#    specifies a file name for logging all errors, warnings, etc., rather
#    than stderr
# 
# .. envvar:: MESA_EXTENSION_OVERRIDE
# 
#    can be used to enable/disable extensions. A value such as
#    ``GL_EXT_foo -GL_EXT_bar`` will enable the ``GL_EXT_foo`` extension
#    and disable the ``GL_EXT_bar`` extension. Note that this will override
#    extensions override configured using driconf.
# 
# .. envvar:: MESA_EXTENSION_MAX_YEAR
# 
#    The ``GL_EXTENSIONS`` string returned by Mesa is sorted by extension
#    year. If this variable is set to year X, only extensions defined on
#    or before year X will be reported. This is to work-around a bug in
#    some games where the extension string is copied into a fixed-size
#    buffer without truncating. If the extension string is too long, the
#    buffer overrun can cause the game to crash. This is a work-around for
#    that.
# 
# .. envvar:: MESA_GL_VERSION_OVERRIDE
# 
#    changes the value returned by ``glGetString(GL_VERSION)`` and
#    possibly the GL API type.
# 
#    -  The format should be ``MAJOR.MINOR[FC|COMPAT]``
#    -  ``FC`` is an optional suffix that indicates a forward compatible
#       context. This is only valid for versions >= 3.0.
#    -  ``COMPAT`` is an optional suffix that indicates a compatibility
#       context or :ext:`GL_ARB_compatibility` support. This is only valid
#       for versions >= 3.1.
#    -  GL versions <= 3.0 are set to a compatibility (non-Core) profile
#    -  GL versions = 3.1, depending on the driver, it may or may not have
#       the :ext:`GL_ARB_compatibility` extension enabled.
#    -  GL versions >= 3.2 are set to a Core profile
#    -  Examples:
# 
#       ``2.1``
#          select a compatibility (non-Core) profile with GL version 2.1.
#       ``3.0``
#          select a compatibility (non-Core) profile with GL version 3.0.
#       ``3.0FC``
#          select a Core+Forward Compatible profile with GL version 3.0.
#       ``3.1``
#          select GL version 3.1 with :ext:`GL_ARB_compatibility` enabled
#          per the driver default.
#       ``3.1FC``
#          select GL version 3.1 with forward compatibility and
#          :ext:`GL_ARB_compatibility` disabled.
#       ``3.1COMPAT``
#          select GL version 3.1 with :ext:`GL_ARB_compatibility` enabled.
#       ``X.Y``
#          override GL version to X.Y without changing the profile.
#       ``X.YFC``
#          select a Core+Forward Compatible profile with GL version X.Y.
#       ``X.YCOMPAT``
#          select a Compatibility profile with GL version X.Y.
# 
#    -  Mesa may not really implement all the features of the given
#       version. (for developers only)
# 
# .. envvar:: MESA_GLES_VERSION_OVERRIDE
# 
#    changes the value returned by ``glGetString(GL_VERSION)`` for OpenGL
#    ES.
# 
#    -  The format should be ``MAJOR.MINOR``
#    -  Examples: ``2.0``, ``3.0``, ``3.1``
#    -  Mesa may not really implement all the features of the given
#       version. (for developers only)
# 
# .. envvar:: MESA_GLSL_VERSION_OVERRIDE
# 
#    changes the value returned by
#    ``glGetString(GL_SHADING_LANGUAGE_VERSION)``. Valid values are
#    integers, such as ``130``. Mesa will not really implement all the
#    features of the given language version if it's higher than what's
#    normally reported. (for developers only)
# 
# .. envvar:: MESA_DRICONF_EXECUTABLE_OVERRIDE
# 
#    if set, overrides the "executable" string used specifically for driconf
#    option matching. This takes higher precedence over more general process
#    name override (e.g. MESA_PROCESS_NAME).
# 
# .. envvar:: MESA_SHADER_CACHE_DISABLE
# 
#    if set to ``true``, disables the on-disk shader cache. If set to
#    ``false``, enables the on-disk shader cache when it is disabled by
#    default.  Note that EGL_ANDROID_blob_cache is still enabled even
#    if on-disk shader cache is disabled.
# 
# .. envvar:: MESA_SHADER_CACHE_MAX_SIZE
# 
#    if set, determines the maximum size of the on-disk cache of compiled
#    shader programs. Should be set to a number optionally followed by
#    ``K``, ``M``, or ``G`` to specify a size in kilobytes, megabytes, or
#    gigabytes. By default, gigabytes will be assumed. And if unset, a
#    maximum size of 1GB will be used.
# 
#    .. note::
# 
#       A separate cache might be created for each architecture that Mesa is
#       installed for on your system. For example under the default settings
#       you may end up with a 1GB cache for x86_64 and another 1GB cache for
#       i386.
# 
# .. envvar:: MESA_SHADER_CACHE_DIR
# 
#    if set, determines the directory to be used for the on-disk cache of
#    compiled shader programs. If this variable is not set, then the cache
#    will be stored in ``$XDG_CACHE_HOME/mesa_shader_cache_db`` (if that
#    variable is set), or else within ``.cache/mesa_shader_cache_db`` within
#    the user's home directory.
# 
# .. envvar:: MESA_SHADER_CACHE_SHOW_STATS
# 
#    if set to ``true``, keeps hit/miss statistics for the shader cache.
#    These statistics are printed when the app terminates.
# 
# .. envvar:: MESA_DISK_CACHE_SINGLE_FILE
# 
#    if set to 1, enables the single file Fossilize DB on-disk shader
#    cache implementation instead of the default Mesa-DB cache
#    implementation. This implementation allows for loading of precompiled
#    cache DBs via :envvar:`MESA_DISK_CACHE_READ_ONLY_FOZ_DBS` or
#    :envvar:`MESA_DISK_CACHE_READ_ONLY_FOZ_DBS_DYNAMIC_LIST`. This
#    implementation does not support cache size limits via
#    :envvar:`MESA_SHADER_CACHE_MAX_SIZE`. If
#    :envvar:`MESA_SHADER_CACHE_DIR` is not set, the cache will be stored
#    in ``$XDG_CACHE_HOME/mesa_shader_cache_sf`` (if that variable is set)
#    or else within ``.cache/mesa_shader_cache_sf`` within the user's home
#    directory.
# 
# .. envvar:: MESA_DISK_CACHE_MULTI_FILE
# 
#    if set to 1, enables the multi file on-disk shader cache implementation
#    instead of the default Mesa-DB cache implementation.
#    This implementation increases the overall disk usage.
#    If :envvar:`MESA_SHADER_CACHE_DIR` is not set, the cache will be stored
#    in ``$XDG_CACHE_HOME/mesa_shader_cache`` (if that variable is set)
#    or else within ``.cache/mesa_shader_cache`` within the user's home
#    directory.
MESA_DISK_CACHE_MULTI_FILE=1
# 
# .. envvar:: MESA_DISK_CACHE_READ_ONLY_FOZ_DBS
# 
#    if set with :envvar:`MESA_DISK_CACHE_SINGLE_FILE` enabled, references
#    a string of comma separated file paths to read only Fossilize DB
#    shader caches for loading at initialization. The file paths are
#    relative to the cache directory and do not include suffixes,
#    referencing both the cache DB and its index file. E.g.
#    ``MESA_DISK_CACHE_SINGLE_FILE=filename1`` refers to ``filename1.foz``
#    and ``filename1_idx.foz``. A limit of 8 DBs can be loaded and this limit
#    is shared with :envvar:`MESA_DISK_CACHE_READ_ONLY_FOZ_DBS_DYNAMIC_LIST`.
# 
# .. envvar:: MESA_DISK_CACHE_DATABASE_NUM_PARTS
# 
#    specifies number of mesa-db cache parts, default is 50.
# 
# .. envvar:: MESA_DISK_CACHE_DATABASE_EVICTION_SCORE_2X_PERIOD
# 
#    Mesa-DB cache eviction algorithm calculates weighted score for the
#    cache items. The weight is doubled based on the last access time of
#    cache entry. By default period of weight doubling is set to one month.
#    Period value is given in seconds.
# 
# .. envvar:: MESA_DISK_CACHE_READ_ONLY_FOZ_DBS_DYNAMIC_LIST
# 
#    if set with :envvar:`MESA_DISK_CACHE_SINGLE_FILE` enabled, references
#    a text file that contains a new-line separated list of read only
#    Fossilize DB shader caches to load. The list file is modifiable at
#    runtime to allow for loading read only caches after initialization
#    unlike :envvar:`MESA_DISK_CACHE_READ_ONLY_FOZ_DBS`. This variable
#    takes an absolute path to the list file. The list file must exist at
#    initialization for updating to occur. Cache files in the list take
#    relative paths to the current cache directory like
#    :envvar:`MESA_DISK_CACHE_READ_ONLY_FOZ_DBS`. A limit of 8 DBs can be
#    loaded and this limit is shared with
#    :envvar:`MESA_DISK_CACHE_READ_ONLY_FOZ_DBS`.
# 
# .. envvar:: MESA_DISK_CACHE_COMBINE_RW_WITH_RO_FOZ
# 
#    if set to 1, enables simultaneous use of :abbr:`RW (read-write)` and
#    :abbr:`RW (read-write)` Fossilize DB caches. At first, data will be
#    retrieved from the RO Fossilize cache. If data isn't found in the RO
#    cache, then it will be retrieved from the RW cache.
# 
# .. envvar:: MESA_GLSL
# 
#    :ref:`shading language compiler options <envvars>`
# 
# .. envvar:: MESA_NO_MINMAX_CACHE
# 
#    when set, the minmax index cache is globally disabled.
# 
# .. envvar:: MESA_SHADER_CAPTURE_PATH
# 
#    see :ref:`Capturing Shaders <capture>`
# 
# .. envvar:: MESA_SHADER_DUMP_PATH
# 
#    see :ref:`Experimenting with Shader Replacements <replacement>`
# 
# .. envvar:: MESA_SHADER_READ_PATH
# 
#    see :ref:`Experimenting with Shader Replacements <replacement>`
# 
# .. envvar:: MESA_VK_VERSION_OVERRIDE
# 
#    changes the Vulkan physical device version as returned in
#    ``VkPhysicalDeviceProperties::apiVersion``.
# 
#    -  The format should be ``MAJOR.MINOR[.PATCH]``
#    -  This will not let you force a version higher than the driver's
#       instance version as advertised by ``vkEnumerateInstanceVersion``
#    -  This can be very useful for debugging but some features may not be
#       implemented correctly. (For developers only)
# 
# .. envvar:: MESA_VK_WSI_PRESENT_MODE
# 
#    overrides the WSI present mode clients specify in
#    ``VkSwapchainCreateInfoKHR::presentMode``. Values can be ``fifo``,
#    ``relaxed``, ``mailbox`` or ``immediate``.
# 
# .. envvar:: MESA_VK_WSI_HEADLESS_SWAPCHAIN
# 
#    Forces all swapchains to be headless (no rendering will be display
#    in the swapchain's window).
# 
# .. envvar:: MESA_VK_ABORT_ON_DEVICE_LOSS
# 
#    causes the Vulkan driver to call abort() immediately after detecting a
#    lost device.  This is extremely useful when testing as it prevents the
#    test suite from continuing on with a lost device.
# 
# .. envvar:: MESA_VK_ENABLE_SUBMIT_THREAD
# 
#    for Vulkan drivers which support real timeline semaphores, this forces
#    them to use a submit thread from the beginning, regardless of whether or
#    not they ever see a wait-before-signal condition.
# 
# .. envvar:: MESA_VK_DEVICE_SELECT_DEBUG
# 
#    print debug info about device selection decision-making
# 
# .. envvar:: MESA_VK_TRACE
# 
#    A comma-separated list of trace types used for offline analysis. The
#    option names are equal to the file extension. Traces are dumped into ``/tmp``.
#    Captures can be triggered by pressing ``F1`` with the application window
#    focused (Currently X11 only) or via :envvar:`MESA_VK_TRACE_FRAME` and
#    :envvar:`MESA_VK_TRACE_TRIGGER`.
# 
#    .. list-table::
#       :header-rows: 1
# 
#       * - File extension
#         - Offline analysis tool
#         - Supported drivers
#       * - ``rmv``
#         - Radeon Memory Visualizer
#         - ``RADV``
#       * - ``rgp``
#         - Radeon GPU Profiler
#         - ``RADV``
#       * - ``rra``
#         - Radeon Raytracing Analyzer
#         - ``RADV``
#       * - ``ctxroll``
#         - Context rolls
#         - ``RADV``
# 
#    - Creating RMV captures requires the ``scripts/setup.sh`` script in the
#      Radeon Developer Tools folder to be run beforehand
# 
# .. envvar:: MESA_VK_TRACE_PER_SUBMIT
# 
#    Enables per-submit capture for compute-only workload. Disabled by default
#    and only valid with MESA_VK_TRACE=rgp.
# 
# .. envvar:: MESA_VK_TRACE_FRAME
# 
#    Specifies a frame index at which a trace capture is automatically triggered.
#    Ignored when MESA_VK_TRACE_PER_SUBMIT is enabled.
# 
# .. envvar:: MESA_VK_TRACE_TRIGGER
# 
#    Specifies a trigger file. Creating the file triggers the capture. (e.g.
#    ``export MESA_VK_TRACE_TRIGGER=/tmp/trigger`` and then ``touch /tmp/trigger``)
#    Ignored when MESA_VK_TRACE_PER_SUBMIT is enabled.
# 
# .. envvar:: MESA_LOADER_DRIVER_OVERRIDE
# 
#    chooses a different driver binary such as ``etnaviv`` or ``zink``.
# MESA_LOADER_DRIVER_OVERRIDE=iris
#
# See: https://docs.mesa3d.org/drivers/zink.html
# MESA_LOADER_DRIVER_OVERRIDE=zink
# 
# .. envvar:: MESA_GL_VERSION_OVERRIDE
# 
#    changes the value returned by ``glGetString(GL_VERSION)`` and
#    possibly the GL API type.
# 
#    -  The format should be ``MAJOR.MINOR[FC|COMPAT]``
#    -  ``FC`` is an optional suffix that indicates a forward compatible
#       context. This is only valid for versions >= 3.0.
#    -  ``COMPAT`` is an optional suffix that indicates a compatibility
#       context or :ext:`GL_ARB_compatibility` support. This is only valid
#       for versions >= 3.1.
#    -  GL versions <= 3.0 are set to a compatibility (non-Core) profile
#    -  GL versions = 3.1, depending on the driver, it may or may not have
#       the :ext:`GL_ARB_compatibility` extension enabled.
#    -  GL versions >= 3.2 are set to a Core profile
#    -  Examples:
# 
#       ``2.1``
#          select a compatibility (non-Core) profile with GL version 2.1.
#       ``3.0``
#          select a compatibility (non-Core) profile with GL version 3.0.
#       ``3.0FC``
#          select a Core+Forward Compatible profile with GL version 3.0.
#       ``3.1``
#          select GL version 3.1 with :ext:`GL_ARB_compatibility` enabled
#          per the driver default.
#       ``3.1FC``
#          select GL version 3.1 with forward compatibility and
#          :ext:`GL_ARB_compatibility` disabled.
#       ``3.1COMPAT``
#          select GL version 3.1 with :ext:`GL_ARB_compatibility` enabled.
#       ``X.Y``
#          override GL version to X.Y without changing the profile.
#       ``X.YFC``
#          select a Core+Forward Compatible profile with GL version X.Y.
#       ``X.YCOMPAT``
#          select a Compatibility profile with GL version X.Y.
# 
#    -  Mesa may not really implement all the features of the given
#       version. (for developers only)
# MESA_GL_VERSION_OVERRIDE=3.1

# .. envvar:: MESA_GLES_VERSION_OVERRIDE
# 
#    changes the value returned by ``glGetString(GL_VERSION)`` for OpenGL
#    ES.
# 
#    -  The format should be ``MAJOR.MINOR``
#    -  Examples: ``2.0``, ``3.0``, ``3.1``
#    -  Mesa may not really implement all the features of the given
#       version. (for developers only)
# MESA_GLES_VERSION_OVERRIDE=3.1

# Mesa - Shader caching
MESA_SHADER_CACHE_DISABLE=false
MESA_SHADER_CACHE_MAX_SIZE=512M

# DRI
DRI_NO_MSAA=false
# DRI_PRIME=

# Intel
# INTEL_DECODE=
INTEL_EXTENDED_METRICS=0
# INTEL_FORCE_PROBE=
# INTEL_MEASURE=
INTEL_NO_HW=false
# INTEL_SIMD_DEBUG=
INTEL_PRECISE_TRIG=false
# INTEL_DEBUG=
